@page "/connections"
@using DbListener.Dal
@using DbListener.Services
@using Microsoft.EntityFrameworkCore
@using DbListener.Dal.Entityes
@using SqlParser.Net;
@using SqlParser.Net.Ast.Expression
@inject ConnectionDbContext _db
@inject IDialogService DialogService

<style>
    .connection-container {
    display: grid;
    grid-template-columns: 2fr 2fr 1fr 1fr 1fr 1fr auto auto auto;
    gap: 8px;
    align-items: center;
    padding: 8px 12px; /* Reduced padding */
    }

    .truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: 0.9rem;
    }

    .connection-paper {
    background-color: #f5f5f5;
    margin: 2px 0; /* Reduced margin */
    border-radius: 12px; /* More rounded corners */
    }

    .main-container {
    padding: 4px; /* Reduced padding */
    width: 100%;
    max-width: 100%;
    margin-top: 5px;
    }

    .header-text {
    font-size: 1rem;
    font-weight: 500;
    }

    .numeric-field {
    font-size: 0.9rem;
    }

    .action-buttons {
    display: flex;
    gap: 8px;
    }

    .mud-chip {
    border-radius: 12px; /* Ensure chips have rounded corners */
    }
</style>

<MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="false">
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@ToggleDrawer" />
    </MudAppBar>

    <MudDrawer @bind-Open="@_open" Elevation="1" Anchor="Anchor.End">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Настройки</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="/">Добавить соединение</MudNavLink>
            <MudNavLink Href="/connections">Соединения</MudNavLink>
            <MudNavLink Href="/billing">Отслеживание действий</MudNavLink>
            <MudNavLink Href="/code-editor">Редактор кода</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <div class="main-container">
            <!-- Заголовки столбцов -->
            <MudPaper Class="connection-paper" Elevation="0">
                <div class="connection-container" style="background-color: #e0e0e0;">
                    <MudText Class="truncate header-text">Название</MudText>
                    <MudText Class="truncate header-text">URL</MudText>
                    <MudText Class="truncate header-text">Порт</MudText>
                    <MudText Class="truncate header-text">Ожидание</MudText>
                    <MudText Class="truncate header-text">Выполнение</MudText>
                    <MudText Class="truncate header-text">Статус</MudText>
                    <div></div>
                    <div></div>
                    <div></div>
                </div>
            </MudPaper>

            <!-- Список соединений -->
            @foreach (var connect in connections)
            {
                <MudPaper Class="connection-paper" Elevation="0">
                    <div class="connection-container">
                        <MudText Class="truncate" Style="font-size: 0.95rem;">@connect.ConnectionName</MudText>
                        <MudText Class="truncate" Style="font-size: 0.95rem;">@connect.Url</MudText>
                        <MudText Class="truncate" Style="font-size: 0.95rem;">@connect.Port</MudText>
                        <MudNumericField @bind-Value="connect.Wait" Min="0" Class="numeric-field" Style="padding: 0; font-size: 0.95rem;" />
                        <MudNumericField @bind-Value="connect.WorkTime" Min="0" Class="numeric-field" Style="padding: 0; font-size: 0.95rem;" />
                        <MudChip Class="truncate" Style="font-size: 0.9rem;" T="string" Variant="Variant.Outlined" Color="Color.Secondary">Отключено</MudChip>
                        <div class="action-buttons">
                            <MudIconButton Icon="@Icons.Material.Outlined.CallMade" Size="Size.Medium" Color="Color.Primary" OnClick="@(() => HandleCallMade(connect))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Update" Size="Size.Medium" Color="Color.Info" OnClick="@(() => HandleUpdate(connect))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="Size.Medium" Color="Color.Error" OnClick="@(() => HandleDelete(connect))" />
                        </div>
                    </div>
                </MudPaper>
            }
        </div>
    </MudMainContent>
</MudLayout>

@code {
    private string outputValue = "";
    private bool _open;
    private bool IsNoiseCheck = false;
    private List<Connection> connections = new List<Connection>();

    protected override async Task OnInitializedAsync()
    {
        connections = await _db.Connections.ToListAsync();
    }

    private async Task HandleCallMade(Connection connect)
    {
        _db.Connections.Update(connect);
        await _db.SaveChangesAsync();
        TrackRequests(connect);
    }

    private Task<IDialogReference> HandleUpdate(Connection connect)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var paramets = new DialogParameters
            {
                ["Connection"] = connect
            };

        return DialogService.ShowAsync<UpdateDialog>("Simple Dialog", paramets, options);
    }

    private async Task HandleDelete(Connection connect)
    {
        _db.Connections.Remove(connect);
        await _db.SaveChangesAsync();
        connections.Remove(connect);
        StateHasChanged();

    }

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    private async Task TrackRequests(Connection connection)
    {
        int intervalMilliseconds = 100; //Интервал проверки (0.1 сек)
        int durationMinutes = connection.WorkTime; //Время работы (1 мин)
        var type = SqlParser.Net.DbType.Pgsql;
        var tracker = new Services.PostgresQueryTracker(
            connection,
            type,
            _db);
        if (!IsNoiseCheck)
        {
            await tracker.StartTracking(1, true);
            IsNoiseCheck = true;
            return;
        }
        await tracker.StartTracking(1,false);

    }    
}
